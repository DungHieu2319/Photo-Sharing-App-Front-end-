Edit comments:
- Backend:
+ folder routes => file PhotoRouter.js

Nhớ thêm vào const
router.put("/update-comment", updateCommentById);

+ folder controllers => file photo-controller.js

const updateCommentById = async (req, res) => {
  const { photoId, commentId, userId, newComment } = req.body;

  try {
    const photo = await Photo.findOne({
      _id: photoId,
      "comments._id": commentId,
      "comments.user_id": userId
    });

    if (!photo) {
      return res.status(404).json({ message: "Comment not found or user unauthorized" });
    }

    // Lấy comment con theo _id
    const comment = photo.comments.id(commentId);
    if (!comment) {
      return res.status(404).json({ message: "Comment not found" });
    }

    comment.comment = newComment;
    comment.date_time = new Date(); // có thể update lại thời gian

    await photo.save();

    res.status(200).json({ message: "Comment updated successfully", comment });
  } catch (err) {
    console.error("Error updating comment:", err);
    res.status(500).json({ message: "Server error" });
  }
};
Đừng quên export

+ folder services:
export const updateCommentByIdService = async (photoId, commentId, userId, newComment) => {
  return axiosInstance.put("/api/photos/update-comment", {
    photoId,
    commentId,
    userId,
    newComment,
  });
};

+ userPhotos:

import React, { useEffect, useState } from "react";
import { Box, Button, Paper, TextField, Typography } from "@mui/material";
import { jwtDecode } from "jwt-decode";
import "./styles.css";
import { useNavigate, useParams } from "react-router-dom";
import {
  addNewCommentService,
  deleteCommentByIdService,
  deletePhotoById,
  getCommentsByPhotoId,
  getPhotosByUserIdService,
  getUserByIdService,
  updateCommentByIdService,
} from "../../services";

/**
 * Define UserPhotos, a React component of Project 4.
 */
function UserPhotos() {
  const [photos, setPhotos] = useState([]);
  const [user, setUser] = useState({});
  const { userId } = useParams();
  const [deletePhoto, setDeletePhoto] = useState(false);
  const token = JSON.parse(sessionStorage.getItem("accessToken")) || "";
  const payload = jwtDecode(token);
  const [comment, setComment] = useState("");
  const [commentMap, setCommentMap] = useState({});
  const [userMap, setUserMap] = useState({});
  const navigate = useNavigate();
  const [deleteComment, setDeleteComment] = useState(false);
  const [editCommentId, setEditCommentId] = useState(null);
  const [editContent, setEditContent] = useState("");

  useEffect(() => {
    getUser();
  }, [userId]);

  useEffect(() => {
    getPhotosAndComments();
    setDeletePhoto(false);
    setDeleteComment(false);
  }, [userId, deletePhoto, deleteComment]);

  async function getUser() {
    const res = await getUserByIdService(userId);
    setUser(res.data);
  }

  async function getPhotosAndComments() {
    const res = await getPhotosByUserIdService(userId);
    const photoList = res.data;
    const tempCommentMap = {};
    const tempUserMap = {};

    for (const photo of photoList) {
      const commentRes = await getCommentsByPhotoId(photo._id);
      const comments = commentRes.data || [];
      tempCommentMap[photo._id] = comments;

      for (const cmt of comments) {
        const uid = cmt.user_id;
        if (!uid) continue;
        if (!tempUserMap[uid]) {
          const userRes = await getUserByIdService(uid);
          tempUserMap[uid] = userRes?.data;
        }
      }
    }

    setPhotos(photoList);
    setCommentMap(tempCommentMap);
    setUserMap(tempUserMap);
  }

  async function handleDeletePhoto(photoId) {
    const res = await deletePhotoById(photoId);
    if (res) setDeletePhoto(true);
  }

  async function handleSubmitComment(photoId, userId, comment) {
    if (!comment.trim()) {
      alert("Comment cannot be empty, please type something.");
      return;
    }
    const res = await addNewCommentService(photoId, userId, comment);
    if (res) {
      alert("Comment added successfully");
      setComment("");

      const commentRes = await getCommentsByPhotoId(photoId);
      const newComments = commentRes.data;
      const updatedUserMap = { ...userMap };

      for (const cmt of newComments) {
        const uid = cmt.user_id;
        if (uid && !updatedUserMap[uid]) {
          try {
            const userRes = await getUserByIdService(uid);
            updatedUserMap[uid] = userRes.data;
          } catch (err) {
            console.error("Failed to load user for comment:", uid, err);
          }
        }
      }

      setUserMap(updatedUserMap);
      setCommentMap((prev) => ({
        ...prev,
        [photoId]: newComments,
      }));
    }
  }

  function handleCommentChange(e) {
    setComment(e.target.value);
  }

  function handleForwardUser(userId) {
    navigate(`/users/${userId}`);
  }

  async function handleDeleteComment(photoId, commentId) {
    const res = await deleteCommentByIdService(photoId, commentId);
    if (res) setDeleteComment(true);
  }

  async function handleUpdateComment(photoId, commentId, userId, newContent) {
    if (!newContent.trim()) {
      alert("Comment content cannot be empty.");
      return;
    }

    try {
      const res = await updateCommentByIdService(
        photoId,
        commentId,
        userId,
        newContent
      );
      if (res.status === 200) {
        const commentRes = await getCommentsByPhotoId(photoId);
        const updatedComments = commentRes.data;
        setCommentMap((prev) => ({
          ...prev,
          [photoId]: updatedComments,
        }));
        setEditCommentId(null);
        setEditContent("");
      }
    } catch (err) {
      console.error("Failed to update comment:", err);
    }
  }

  return (
    <Box>
      <Typography variant="h5" gutterBottom>
        Photos of {user.first_name}
      </Typography>

      {photos.length === 0 ? (
        <Typography>No photo uploaded yet.</Typography>
      ) : (
        photos.map((item, index) => (
          <Paper
            key={index}
            elevation={3}
            sx={{
              marginBottom: 2,
              padding: 1,
              borderRadius: 2,
              overflow: "hidden",
              maxWidth: "100%",
            }}
          >
            <Box display="flex" alignItems="flex-start">
              <img
                src={`http://localhost:5000/images/${item.file_name}`}
                alt={`photo-${index}`}
                style={{
                  width: "75%",
                  height: "auto",
                  display: "block",
                  borderRadius: "8px",
                  margin: "9px",
                }}
              />
              {item.user_id === String(payload._id) && (
                <Button
                  onClick={() => handleDeletePhoto(item._id)}
                  color="error"
                  variant="contained"
                  style={{ margin: "9px" }}
                >
                  Delete photo
                </Button>
              )}
            </Box>

            <input
              style={{
                margin: "9px",
                height: "60px",
                width: "74%",
                resize: "none",
              }}
              type="textarea"
              placeholder="Comment..."
              value={comment}
              onChange={handleCommentChange}
            />
            <Button
              style={{ margin: "9px" }}
              variant="contained"
              color="success"
              onClick={() =>
                handleSubmitComment(item._id, payload._id, comment)
              }
            >
              Post comment
            </Button>

            <Box>
              <Typography
                sx={{ fontWeight: "bold" }}
                style={{ margin: "9px" }}
              >
                Total Comment: ({commentMap[item._id]?.length || 0})
              </Typography>

              {commentMap[item._id]?.map((cmt, idx) => {
                const user = userMap[cmt.user_id];
                return (
                  <Box
                    key={idx}
                    sx={{
                      margin: "10px 0",
                      padding: "10px",
                      border: "1px solid #ccc",
                      borderRadius: "8px",
                      backgroundColor: "#f9f9f9",
                    }}
                  >
                    <p>
                      Uploaded at{" "}
                      {new Date(cmt.date_time).toLocaleString("vi-VN", {
                        timeZone: "Asia/Ho_Chi_Minh",
                        hour12: false,
                        year: "numeric",
                        month: "2-digit",
                        day: "2-digit",
                        hour: "2-digit",
                        minute: "2-digit",
                        second: "2-digit",
                      })}{" "}
                      by{" "}
                      <Button onClick={() => handleForwardUser(user._id)}>
                        {user?.first_name} {user?.last_name}
                      </Button>
                    </p>

                    {editCommentId === cmt._id ? (
                      <>
                        <TextField
                          fullWidth
                          multiline
                          rows={2}
                          value={editContent}
                          onChange={(e) => setEditContent(e.target.value)}
                          sx={{ marginBottom: 1 }}
                        />
                        <Box display="flex" gap={1}>
                          <Button
                            variant="contained"
                            color="primary"
                            onClick={() =>
                              handleUpdateComment(
                                item._id,
                                cmt._id,
                                payload._id,
                                editContent
                              )
                            }
                          >
                            Save
                          </Button>
                          <Button
                            variant="outlined"
                            color="secondary"
                            onClick={() => {
                              setEditCommentId(null);
                              setEditContent("");
                            }}
                          >
                            Cancel
                          </Button>
                        </Box>
                      </>
                    ) : (
                      <>
                        <Typography
                          variant="body1"
                          sx={{
                            marginBottom: "5px",
                            whiteSpace: "pre-wrap",
                          }}
                        >
                          {cmt.comment}
                        </Typography>

                        {payload._id === cmt.user_id && (
                          <Box display="flex" gap={1}>
                            <Button
                              variant="outlined"
                              color="error"
                              onClick={() =>
                                handleDeleteComment(item._id, cmt._id)
                              }
                            >
                              Delete Comment
                            </Button>
                            <Button
                              variant="outlined"
                              color="primary"
                              onClick={() => {
                                setEditCommentId(cmt._id);
                                setEditContent(cmt.comment);
                              }}
                            >
                              Edit
                            </Button>
                          </Box>
                        )}
                      </>
                    )}
                  </Box>
                );
              })}
            </Box>
          </Paper>
        ))
      )}
    </Box>
  );
}

export default UserPhotos;
